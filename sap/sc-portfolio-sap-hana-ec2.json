{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template for used to create SAP Hana SC products (fdp-1r56d8aqf)",
  "Outputs": {
    "OutProductAssociateSAP": {
      "Value": {
        "Ref": "ProductAssociateSAP"
      }
    },
    "OutSAPsclaunchRole": {
      "Value": {
        "Ref": "SAPsclaunchRole"
      }
    },
    "OutSCSAPAction": {
      "Value": {
        "Ref": "SCSAPAction"
      }
    },
    "OutSCSAPaddFunction": {
      "Value": {
        "Ref": "SCSAPaddFunction"
      }
    },
    "OutSCSAPaddFunctionRole": {
      "Value": {
        "Ref": "SCSAPaddFunctionRole"
      }
    },
    "OutSCSAPlaunch": {
      "Value": {
        "Ref": "SCSAPlaunch"
      }
    },
    "ProductId": {
      "Value": {
        "Fn::GetAtt": [
          "SCSAPAction",
          "ProductId"
        ]
      }
    }
  },
  "Parameters": {
    "PortfolioId": {
      "Default": "port-lifmlrsp4qvjw",
      "Description": "Which portfolio should the product be added to [PortfolioId]. This portfolio should be accessible to the AWS Management connector",
      "Type": "String"
    },
    "TemplateName": {
      "Default": "LaunchWizard-sap002",
      "Description": "What is the name of the template the Launch Wizard deployed.",
      "Type": "String"
    },
    "HoldingBucket": {
      "Default": "kwdem0s",
      "Description": "Which bucket contains deployment content",
      "Type": "String"
    }
  },
  "Resources": {
    "CopyZipsFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "import json\nimport logging\nimport threading\nimport boto3\nimport cfnresponse\n\ndef emptydbucket(bucket):\n    s3 = boto3.resource('s3')\n    obucket = s3.Bucket(bucket)\n    _obj =obucket.objects.all()\n    _objects=[]\n    for skey in _obj:\n        skey=str(skey )\n        keya = skey.split(\"key=u'\")\n        _objects.append(keya[1].split(\"'\")[0])\n    return(_objects)\n  \n\ndef getbkutlist(bucket):\n    s3 = boto3.client('s3')\n    bres = s3.list_objects_v2(Bucket=bucket)\n    _cret=[]\n    for _c in bres['Contents']:\n        _cret.append(_c['Key'])\n    return(_cret)\n\ndef copy_objects(source_bucket, dest_bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    for o in objects:\n        key = prefix + o\n        copy_source = {\n            'Bucket': source_bucket,\n            'Key': key\n        }\n        print('copy_source: %s' % copy_source)\n        print('dest_bucket = %s'%dest_bucket)\n        print('key = %s' %key)\n        s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,\n              Key=key)\n\n\ndef delete_objects(bucket, prefix, objects):\n    s3 = boto3.client('s3')\n    objects = {'Objects': [{'Key': prefix + o} for o in objects]}\n    s3.delete_objects(Bucket=bucket, Delete=objects)\n\n\ndef big_clean(bucket):\n    s3 = boto3.client('s3')\n    gobjects= getbkutlist(bucket)\n    dobject= {'Objects': [{'Key': o} for o in gobjects]}\n    s3.delete_objects(Bucket=bucket, Delete=dobject)\n    \n    \ndef timeout(event, context):\n    logging.error('Execution is about to time out, sending failure response to CloudFormation')\n    cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)\n\n\ndef handler(event, context):\n    # make sure we send a failure to CloudFormation if the function\n    # is going to timeout\n    print(json.dumps(event))\n    \n\n\n    timer = threading.Timer((context.get_remaining_time_in_millis()\n              / 1000.00) - 0.5, timeout, args=[event, context])\n    timer.start()\n\n    print('Received event: %s' % json.dumps(event))\n    status = cfnresponse.SUCCESS\n    try:\n        source_bucket = event['ResourceProperties']['SourceBucket']\n        dest_bucket = event['ResourceProperties']['DestBucket']\n        prefix = event['ResourceProperties']['Prefix']\n        objects = event['ResourceProperties']['Objects']\n        if event['RequestType'] == 'Delete':\n            #objects = emptydbucket(event['ResourceProperties']['DestBucket']) \n            #delete_objects(event['ResourceProperties']['DestBucket'], prefix, objects)\n            big_clean(event['ResourceProperties']['DestBucket'])\n        else:\n            copy_objects(source_bucket, dest_bucket, prefix, objects)\n    except Exception as e:\n        logging.error('Exception: %s' % e, exc_info=True)\n        status = cfnresponse.FAILED\n    finally:\n        timer.cancel()\n        cfnresponse.send(event, context, status, {}, None)\n"
        },
        "Description": "Copies objects from a source S3 bucket to a destination",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CopyZipsRole",
            "Arn"
          ]
        },
        "Runtime": "python2.7",
        "Timeout": 240
      },
      "Type": "AWS::Lambda::Function"
    },
    "CopyZipsRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${HoldingBucket}/*"
                    }
                  ]
                },
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CopyZipsBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CopyZipsBucket}"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "copy-s3-s3"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "CopyZipsRun": {
      "Properties": {
        "DestBucket": {
          "Ref": "CopyZipsBucket"
        },
        "Objects": [
          "l_sc_cfn_sap_lwiz.zip"
        ],
        "Prefix": "content/sc_lwiz_sap/",
        "ServiceToken": {
          "Fn::GetAtt": [
            "CopyZipsFunction",
            "Arn"
          ]
        },
        "SourceBucket": {
          "Fn::Sub": "${HoldingBucket}"
        }
      },
      "Type": "Custom::CopyZipsRun"
    },
    "CopyZipsBucket": {
      "Type": "AWS::S3::Bucket"
    },
    "ProductAssociateSAP": {
      "DependsOn": [
        "SCSAPAction"
      ],
      "Properties": {
        "AcceptLanguage": "en",
        "PortfolioId": {
          "Ref": "PortfolioId"
        },
        "ProductId": {
          "Fn::GetAtt": [
            "SCSAPAction",
            "ProductId"
          ]
        }
      },
      "Type": "AWS::ServiceCatalog::PortfolioProductAssociation"
    },
    "SAPsclaunchRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "servicecatalog.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonEC2FullAccess",
          "arn:aws:iam::aws:policy/AmazonSQSFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "iam:AddClientIDToOpenIDConnectProvider",
                  "iam:AddRoleToInstanceProfile",
                  "iam:AddUserToGroup",
                  "iam:AttachGroupPolicy",
                  "iam:AttachRolePolicy",
                  "iam:AttachUserPolicy",
                  "iam:ChangePassword",
                  "iam:CreateAccessKey",
                  "iam:CreateAccountAlias",
                  "iam:CreateGroup",
                  "iam:CreateInstanceProfile",
                  "iam:CreateLoginProfile",
                  "iam:CreateOpenIDConnectProvider",
                  "iam:CreatePolicy",
                  "iam:CreatePolicyVersion",
                  "iam:CreateRole",
                  "iam:CreateSAMLProvider",
                  "iam:CreateServiceLinkedRole",
                  "iam:CreateServiceSpecificCredential",
                  "iam:CreateUser",
                  "iam:CreateVirtualMFADevice",
                  "iam:DeactivateMFADevice",
                  "iam:DeleteAccessKey",
                  "iam:DeleteAccountAlias",
                  "iam:DeleteAccountPasswordPolicy",
                  "iam:DeleteGroup",
                  "iam:DeleteGroupPolicy",
                  "iam:DeleteInstanceProfile",
                  "iam:DeleteLoginProfile",
                  "iam:DeleteOpenIDConnectProvider",
                  "iam:DeletePolicy",
                  "iam:DeletePolicyVersion",
                  "iam:DeleteRole",
                  "iam:DeleteRolePermissionsBoundary",
                  "iam:DeleteRolePolicy",
                  "iam:DeleteSAMLProvider",
                  "iam:DeleteSSHPublicKey",
                  "iam:DeleteServerCertificate",
                  "iam:DeleteServiceLinkedRole",
                  "iam:DeleteServiceSpecificCredential",
                  "iam:DeleteSigningCertificate",
                  "iam:DeleteUser",
                  "iam:DeleteUserPermissionsBoundary",
                  "iam:DeleteUserPolicy",
                  "iam:DeleteVirtualMFADevice",
                  "iam:DetachGroupPolicy",
                  "iam:DetachRolePolicy",
                  "iam:DetachUserPolicy",
                  "iam:EnableMFADevice",
                  "iam:GenerateCredentialReport",
                  "iam:GenerateOrganizationsAccessReport",
                  "iam:GenerateServiceLastAccessedDetails",
                  "iam:GetAccessKeyLastUsed",
                  "iam:GetAccountAuthorizationDetails",
                  "iam:GetAccountPasswordPolicy",
                  "iam:GetAccountSummary",
                  "iam:GetContextKeysForCustomPolicy",
                  "iam:GetContextKeysForPrincipalPolicy",
                  "iam:GetCredentialReport",
                  "iam:GetGroup",
                  "iam:GetGroupPolicy",
                  "iam:GetInstanceProfile",
                  "iam:GetLoginProfile",
                  "iam:GetOpenIDConnectProvider",
                  "iam:GetOrganizationsAccessReport",
                  "iam:GetPolicy",
                  "iam:GetPolicyVersion",
                  "iam:GetRole",
                  "iam:GetRolePolicy",
                  "iam:GetSAMLProvider",
                  "iam:GetSSHPublicKey",
                  "iam:GetServerCertificate",
                  "iam:GetServiceLastAccessedDetails",
                  "iam:GetServiceLastAccessedDetailsWithEntities",
                  "iam:GetServiceLinkedRoleDeletionStatus",
                  "iam:GetUser",
                  "iam:GetUserPolicy",
                  "iam:ListAccessKeys",
                  "iam:ListAccountAliases",
                  "iam:ListAttachedGroupPolicies",
                  "iam:ListAttachedRolePolicies",
                  "iam:ListAttachedUserPolicies",
                  "iam:ListEntitiesForPolicy",
                  "iam:ListGroupPolicies",
                  "iam:ListGroups",
                  "iam:ListGroupsForUser",
                  "iam:ListInstanceProfiles",
                  "iam:ListInstanceProfilesForRole",
                  "iam:ListMFADevices",
                  "iam:ListOpenIDConnectProviders",
                  "iam:ListPolicies",
                  "iam:ListPoliciesGrantingServiceAccess",
                  "iam:ListPolicyVersions",
                  "iam:ListRolePolicies",
                  "iam:ListRoleTags",
                  "iam:ListRoles",
                  "iam:ListSAMLProviders",
                  "iam:ListSSHPublicKeys",
                  "iam:ListServerCertificates",
                  "iam:ListServiceSpecificCredentials",
                  "iam:ListSigningCertificates",
                  "iam:ListUserPolicies",
                  "iam:ListUserTags",
                  "iam:ListUsers",
                  "iam:ListVirtualMFADevices",
                  "iam:PassRole",
                  "iam:PutGroupPolicy",
                  "iam:PutRolePermissionsBoundary",
                  "iam:PutRolePolicy",
                  "iam:PutUserPermissionsBoundary",
                  "iam:PutUserPolicy",
                  "iam:RemoveClientIDFromOpenIDConnectProvider",
                  "iam:RemoveRoleFromInstanceProfile",
                  "iam:RemoveUserFromGroup",
                  "iam:ResetServiceSpecificCredential",
                  "iam:ResyncMFADevice",
                  "iam:SetDefaultPolicyVersion",
                  "iam:SetSecurityTokenServicePreferences",
                  "iam:SimulateCustomPolicy",
                  "iam:SimulatePrincipalPolicy",
                  "iam:TagRole",
                  "iam:TagUser",
                  "iam:UntagRole",
                  "iam:UntagUser",
                  "iam:UpdateAccessKey",
                  "iam:UpdateAccountPasswordPolicy",
                  "iam:UpdateAssumeRolePolicy",
                  "iam:UpdateGroup",
                  "iam:UpdateLoginProfile",
                  "iam:UpdateOpenIDConnectProviderThumbprint",
                  "iam:UpdateRole",
                  "iam:UpdateRoleDescription",
                  "iam:UpdateSAMLProvider",
                  "iam:UpdateSSHPublicKey",
                  "iam:UpdateServerCertificate",
                  "iam:UpdateServiceSpecificCredential",
                  "iam:UpdateSigningCertificate",
                  "iam:UpdateUser",
                  "iam:UploadSSHPublicKey",
                  "iam:UploadServerCertificate",
                  "iam:UploadSigningCertificate"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:aws:iam::*:*"
                }
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "ec2_instprofile"
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "ssm:DescribeDocument",
                  "ssm:Put*",
                  "ssm:Add*",
                  "ssm:Remove*",
                  "ssm:GetAutomationExecution",
                  "ssm:StartAutomationExecution",
                  "ssm:StopAutomationExecution",
                  "s3:GetObject"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"
                }
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "SSM_mgt"
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "servicecatalog:ListServiceActionsForProvisioningArtifact",
                  "servicecatalog:ExecuteprovisionedProductServiceAction"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:aws:servicecatalog:${AWS::Region}:${AWS::AccountId}:*/*"
                }
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "SCLaunchPolicy"
          },
          {
            "PolicyDocument": {
              "Statement": {
                "Action": [
                  "cloudformation:DescribeStackResource",
                  "cloudformation:DescribeStackResources",
                  "cloudformation:GetTemplate",
                  "cloudformation:List*",
                  "cloudformation:DescribeStackEvents",
                  "cloudformation:DescribeStacks",
                  "cloudformation:CreateStack",
                  "cloudformation:DeleteStack",
                  "cloudformation:DescribeStackEvents",
                  "cloudformation:DescribeStacks",
                  "cloudformation:GetTemplateSummary",
                  "cloudformation:SetStackPolicy",
                  "cloudformation:ValidateTemplate",
                  "cloudformation:UpdateStack",
                  "cloudformation:ListStackResources"
                ],
                "Effect": "Allow",
                "Resource": {
                  "Fn::Sub": "arn:aws:cloudformation:*"
                }
              },
              "Version": "2012-10-17"
            },
            "PolicyName": "CFTLaunchPolicyCFN"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "SCSAPAction": {
      "DependsOn": [
        "CopyZipsRun"
      ],
      "Properties": {
        "Prefix": "content/sc_lwiz_sap/",
        "HoldingBucket": {
          "Ref": "CopyZipsBucket"
        },
        "PortfolioId": {
          "Ref": "PortfolioId"
        },
        "ServiceToken": {
          "Fn::GetAtt": [
            "SCSAPaddFunction",
            "Arn"
          ]
        },
        "TemplateName": {
          "Ref": "TemplateName"
        }
      },
      "Type": "Custom::SCSAPAction"
    },
    "SCSAPaddFunction": {
       "DependsOn": [
        "CopyZipsRun"
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
          "Ref": "CopyZipsBucket"
        },
          "S3Key": {
            "Fn::Sub": "content/sc_lwiz_sap/l_sc_cfn_sap_lwiz.zip"
          }
        },
        "Description": "Add SAP",
        "Handler": "lambda_function.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "SCSAPaddFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "python3.6",
        "Timeout": 240
      },
      "Type": "AWS::Lambda::Function"
    },
    "SCSAPaddFunctionRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess",
          "arn:aws:iam::aws:policy/AmazonS3FullAccess",
          "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess",
          "arn:aws:iam::aws:policy/AdministratorAccess"
        ],
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:PutObject",
                    "s3:DeleteObject",
                    "s3:Get*",
                    "s3:List*"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:s3:::${CopyZipsBucket}/*"
                    },
                    {
                      "Fn::Sub": "arn:aws:s3:::${CopyZipsBucket}"
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "lambdsd"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "SCSAPlaunch": {
      "DependsOn": [
        "SCSAPAction",
        "ProductAssociateSAP"
      ],
      "Properties": {
        "AcceptLanguage": "en",
        "Description": "DynamoLCDescription",
        "PortfolioId": {
          "Ref": "PortfolioId"
        },
        "ProductId": {
          "Fn::GetAtt": [
            "SCSAPAction",
            "ProductId"
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "SAPsclaunchRole",
            "Arn"
          ]
        }
      },
      "Type": "AWS::ServiceCatalog::LaunchRoleConstraint"
    }
  }
}